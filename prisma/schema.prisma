// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Side {
  BUY
  SELL
}
model User {
  id           String          @id @default(cuid())
  name         String
  password     String
  balance      Int             @default(10000)
  userStocks   UserStock[]
  roundActions RoundAction[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Stock {
  id          String           @id @default(cuid())
  name        String
  prevPrice   Int              @default(20)
  price       Int
  maxQuantity Int              @default(20)
  quantity    Int              @default(20)
  userStocks  UserStock[]
  RoundAction RoundAction[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model UserStock {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  stock       Stock            @relation(fields: [stockId], references: [id])
  stockId     String
  quantity    Int              // 사용자가 보유한 주식 수량
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([userId, stockId]) // 한 사용자가 같은 주식을 중복으로 소유할 수 없도록 제약
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  stockId   String
  quantity  Int
  price     Int
  side      Side
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoundInfo {
  id          String        @id @default(cuid())
  roundNumber Int
  startedAt   DateTime?
  endedAt     DateTime?
  actions     RoundAction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RoundAction {
  id      String @id @default(cuid())
  stock   Stock  @relation(fields: [stockId], references: [id])
  stockId String
  price   Int
  diff    Int

  roundInfo   RoundInfo @relation(fields: [roundInfoId], references: [id])
  roundInfoId String
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  stockId   String
  quantity  Int
  price     Int
  side      Side
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
